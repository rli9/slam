#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <compressed_image_transport/compressed_subscriber.h>
#include <boost/function.hpp>
#include <boost/bind.hpp>
#include <boost/thread.hpp>
#include <opencv2/opencv.hpp>
#include <cv_bridge/cv_bridge.h>
#include <geometry_msgs/Twist.h>
#include <string>
#include "Tracker2D.h"
#include "utilities.h"
#include <iostream>

bool initialPositionSpecified = false;
std::string mainWindowName = "Tracking";

Tracker2D tracker;

void * parameters[6];
int xBeg, xEnd, yBeg, yEnd;

void imageCallback(const sensor_msgs::ImageConstPtr & msg){

  ROS_INFO("Got image message.");

  // get the compressed image, and convert it to Opencv format.
  cv::Mat img;
  try{
   img =  cv_bridge::toCvShare(msg, "bgr8")->image;
  }
  catch(cv_bridge::Exception & e){
    ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
  }
  
  ROS_INFO("Converting image done.");
  std::cout << "image size = ( " << img.rows << " X " << img.cols << " )." << std::endl;

  if( initialPositionSpecified){
    
    // update the tracking status, and draw the result.
    tracker.readFrame(img);

    tracker.updateTrackerStatus();
    tracker.displayCurrentStatus(mainWindowName);

  }

  else{
    // show the image and let the user specify the inital result.
        
    parameters[0] = (void *)(& mainWindowName);
    parameters[1] = (void *)(& xBeg);
    parameters[2] = (void *)(& xEnd);
    parameters[3] = (void *)(& yBeg);
    parameters[4] = (void *)(& yEnd);
    parameters[5] = (void *)(& img);

    ROS_INFO("Select the object ... ");
    
    cv::imshow(mainWindowName, img);
    cv::setMouseCallback("Draw Mask", mouse_callback_drawRectMask, (void *)parameters);

    ROS_INFO("Setting GUI for selecting done.");

    int key = -1;
    while( key != 's') // for save
      cv::waitKey();
    
    ROS_INFO("Object selected.");
    
    // initialize the tracker;
    float initX = (xBeg + yBeg) * 1.0f / 2;
    float initY = (xEnd + yEnd) * 1.0f / 2;
    
    // initialize tracker.
    tracker.initialize(cv::Point2f(initX, initY), MAX(yEnd - yBeg, xEnd - xBeg));
    
    cv::Rect roi(xBeg, yBeg, xEnd - xBeg, yEnd - yBeg);
    cv::Mat objImage = img(roi);
    
    tracker.setObjectFeature(objImage);
    
    initialPositionSpecified = true;

    ROS_INFO("Tracker initializing done.");
  }
}


void trackerAdjustingCallback(geometry_msgs::Twist::ConstPtr & msg)
{

  msg->linear.x ; // -1 ~ 1.
  msg->angular.z ; // -3 ~ 3;

  
}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "tracking");
  ros::NodeHandle nh;

  cv::namedWindow(mainWindowName, CV_WINDOW_AUTOSIZE);
  cv::startWindowThread();
  
  ROS_INFO("Begin subscribing...");

  image_transport::ImageTransport it(nh);

  image_transport::Subscriber sub;
  
  try{
    sub = it.subscribe("/camera/decomp_image", 5, imageCallback);
  }
  catch(image_transport::TransportLoadException& e){
    ROS_ERROR("Subscribing Error!");
  }

  ROS_INFO("Subscribing done...");
  
  ros::spin();
  cv::destroyWindow(mainWindowName);
}
